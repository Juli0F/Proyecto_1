/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tienda.ui;

import com.tienda.actiontable.TableCellListener;
import com.tienda.dto.DetallePedidoProducto;
import com.tienda.entities.Cliente;
import com.tienda.entities.DetalleFactura;
import com.tienda.entities.DetallePedido;
import com.tienda.entities.Factura;
import com.tienda.entities.Pedido;
import com.tienda.entities.TiempoEntreTiendas;
import com.tienda.mysql.Manager;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author julio
 */
public final class EntregarPedido extends javax.swing.JPanel {

    /**
     * Creates new form EntregarPedido
     */
    public EntregarPedido() {
        initComponents();
        manager = new Manager();
        aEntregar = new ArrayList<>();
        cellListener();
        eventoTable();
        eventTextfield(txtCredito);

        this.pedidoSelected = false;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pagar = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        pagarPendiente = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblAnticipo = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        txtCredito = new javax.swing.JTextField();
        lblForTxtCredito = new javax.swing.JLabel();
        lblForTxtEfectivo = new javax.swing.JLabel();
        txtEfectivo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePedidosAEntregar = new javax.swing.JTable();
        btnVerTodo = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDescripcionPedidos = new javax.swing.JTable();
        bntEntrega = new javax.swing.JButton();

        pagarPendiente.setText("Pagar");
        pagarPendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagarPendienteActionPerformed(evt);
            }
        });

        jLabel1.setText("Anticipo");

        jLabel2.setText("Saldo");

        jLabel3.setText("Total");

        lblForTxtCredito.setText("Credito");

        lblForTxtEfectivo.setText("Efectivo");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pagarPendiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAnticipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCredito)
                            .addComponent(lblForTxtCredito, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(lblForTxtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(txtEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnticipo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblForTxtEfectivo, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(lblForTxtCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCredito, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(txtEfectivo))
                .addGap(41, 41, 41)
                .addComponent(pagarPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout pagarLayout = new javax.swing.GroupLayout(pagar.getContentPane());
        pagar.getContentPane().setLayout(pagarLayout);
        pagarLayout.setHorizontalGroup(
            pagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pagarLayout.setVerticalGroup(
            pagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pagarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Buscar");

        tablePedidosAEntregar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Anticipo", "Total", "Fecha Del Pedido", "Nit", "Entregar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablePedidosAEntregar);

        btnVerTodo.setText("Ver Todo");
        btnVerTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerTodoActionPerformed(evt);
            }
        });

        tableDescripcionPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Cantidad"
            }
        ));
        jScrollPane3.setViewportView(tableDescripcionPedidos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bntEntrega.setText("Terminar Entrega");
        bntEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEntregaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnVerTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(bntEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(bntEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVerTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * muestra datos en la tabla de pedidos
     *
     * @param evt
     */
    private void btnVerTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerTodoActionPerformed

        fillTablePedidosAEntregar(manager.getPedidoDAO().paraRecogerSeEncuentraEnDestino(Log.codigoTienda));
    }//GEN-LAST:event_btnVerTodoActionPerformed

    /**
     * muestra un cuadro de dialogo para que el usuario pueda realizar el pago
     * del saldo pendiente
     *
     * @param evt
     */
    private void bntEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEntregaActionPerformed

        txtEfectivo.setText("0.0");
        txtCredito.setText("0.0");
        pagar.setSize(400, 440);
        pagar.setVisible(true);
        datosParaMostrarPagar();
    }//GEN-LAST:event_bntEntregaActionPerformed
    /**
     * verificar si el cliente tiene un pendiente de saldo y si tiene debe puede
     * canncelarlo con credito o efectivo verifica si tiene el credito
     * suficiente para que apareza visible el campo de credito
     *
     */
    public void datosParaMostrarPagar() {

        BigDecimal anticpoDecimal = aEntregar.get(0).getAnticipo();
        BigDecimal totalDecimal = aEntregar.get(0).getSubtotal();
        BigDecimal saldoDecimal = new BigDecimal("" + totalDecimal.subtract(anticpoDecimal));

        if (aEntregar.get(0) != null) {

            lblAnticipo.setText("Q." + anticpoDecimal);
            lblSaldo.setText("Q. " + saldoDecimal);
            lblTotal.setText("Q. " + totalDecimal);

            if (anticpoDecimal.compareTo(totalDecimal) == 0) {

                txtCredito.setVisible(false);
                txtEfectivo.setVisible(false);

                lblForTxtCredito.setVisible(false);
                lblForTxtEfectivo.setVisible(false);

            } else {

                Cliente c = manager.getClienteDAO().obtener(aEntregar.get(0).getCliente_nit());
                //si el credito del cliente es cero debe pagar con efectivo
                if (c.getCredito().compareTo(BigDecimal.ZERO) == 0) {
                    txtCredito.setVisible(false);
                    lblForTxtCredito.setVisible(false);

                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar una Pedido para entregar", "Informacion", JOptionPane.INFORMATION_MESSAGE);

        }
    }

    /**
     * realiza el pago pendiente que tiene el cliente con el pedido s
     *
     * @param evt
     */
    private void pagarPendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagarPendienteActionPerformed
        //si el textfield de credito esta visible significa que aun debe
        if (txtCredito.isVisible()) {

            Cliente cliente = manager.getClienteDAO().obtener(aEntregar.get(0).getCliente_nit());

            BigDecimal pagoEfectivo = new BigDecimal(txtEfectivo.getText());
            BigDecimal pagoCredito = new BigDecimal(txtCredito.getText());
            BigDecimal creditoClien = cliente.getCredito();

            if (pagoCredito.compareTo(creditoClien) <= 0) {

                JOptionPane.showMessageDialog(null, "Credito insuficiente", "Informacion", JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (creditoClien.add(pagoEfectivo).compareTo(aEntregar.get(0).getSubtotal()) <= 0) {

                    translatePedidoAFactura();
                    cliente.setCredito(cliente.getCredito().subtract(pagoCredito));

                } else {
                    JOptionPane.showMessageDialog(null, "Credito insuficiente", "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }

            }

        } else {

            translatePedidoAFactura();
        }
    }//GEN-LAST:event_pagarPendienteActionPerformed
    /**
     * Verifica que e producto se encuentre a tiempo en la tienda de Destino si
     * tiene dias de retraso entoncesle aumentara en 5% el credito del Cliente
     * sino en un 2%
     */
    public void diasTardes() {

        Pedido pedido = aEntregar.get(0);

        //   cantidad -> 100%
        //    x  -> 5%
        BigDecimal porcentaje;
        BigDecimal cien = new BigDecimal("100");
        BigDecimal creditoPlus = new BigDecimal("0");

        if (pedido.getRetraso() != 0) {

            if (pedido.getAnticipo().compareTo(pedido.getSubtotal()) == 0) {
                //agregar %5  
                porcentaje = new BigDecimal("5");
                creditoPlus = (pedido.getSubtotal().multiply(porcentaje));
                creditoPlus = creditoPlus.divide(cien);
            } else {
                //agregar %2
                porcentaje = new BigDecimal("2");
                creditoPlus = (pedido.getSubtotal().multiply(porcentaje));
                creditoPlus = creditoPlus.divide(cien);
            }

            Cliente cliente = manager.getClienteDAO().obtener(pedido.getCliente_nit());
            cliente.setCredito(cliente.getCredito().add(creditoPlus));
        }

    }

    /**
     * metodo que concluye el pedido creando una factura por el pedido y
     * registrando los productos en la factura
     *
     */
    public void translatePedidoAFactura() {

        JOptionPane.showMessageDialog(null, "Procesando Entrega, Facturando", "Informacion", JOptionPane.INFORMATION_MESSAGE);
        TiempoEntreTiendas tet = manager.getTiempoEntreTiendasDAO().getCodigoTiendaUsingidTiempoAndCodigoTiendaDestino(aEntregar.get(0).getCodigoDestino(), aEntregar.get(0).getTiempoDeEnvio_idTiempoDeEnvio());
        aEntregar.get(0).setEntregado(true);
        manager.getPedidoDAO().modify(aEntregar.get(0));
        Factura dePedido = new Factura(0, "Pedido-" + aEntregar.get(0).getCodigo(), true, Log.idUsuario, tet.getTienda_codigo(), aEntregar.get(0).getCliente_nit(), aEntregar.get(0).getSubtotal(), aEntregar.get(0).getFecha());

        manager.getFacturaDAO().insert(dePedido);
        int idFactura = manager.getFacturaDAO().lastInsertId();
        for (DetallePedido detallePedido : manager.getDetallePedidoDAO().obtenerDetallePorCodigoDePedido(aEntregar.get(0).getCodigo())) {

            DetalleFactura detalleFactura = new DetalleFactura(0, idFactura, detallePedido.getProducto_codigo(), detallePedido.getCantidad(), BigDecimal.ZERO);
            manager.getDetalleFacturaDAO().insert(detalleFactura);
           
        }
        diasTardes();
        JOptionPane.showMessageDialog(null, "Factura realizada", "Factura", JOptionPane.INFORMATION_MESSAGE);
        
        pagar.dispose();
        MainFrame.addPanel(new EntregarPedido());

    }

    /**
     * solo permite el ingreso de numeros y puntos
     *
     * @param field al que se le agregara el evento
     *
     */
    public void eventTextfield(JTextField field) {
        field.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {

                if (!(Character.isDigit(e.getKeyChar()) || e.getKeyChar() == 46)) {
                    e.consume();
                }
            }
        });
    }

    /**
     * reconoce el enter arriba y abajo y pasa la descripcion del pedido a la
     * tabla de detallesPedido
     */
    public void eventoTable() {
        tablePedidosAEntregar.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {
                    int rowselect = tablePedidosAEntregar.getSelectedRow();
                    fillTableDetalle(manager.getDetallePedidoDAO().getCodigoProductoCantidad((String) tablePedidosAEntregar.getValueAt(rowselect, 0)));

                }
            }

        });
    }

    /**
     * llena la tabla descripcionDe Pedido con la lista de que se le pasara por
     * parametro
     *
     * @param productos Lista del tipo detallePedidoProducto
     */
    private void fillTableDetalle(List<DetallePedidoProducto> productos) {
        ((DefaultTableModel) tableDescripcionPedidos.getModel()).setRowCount(0);
        productos.forEach(detalles -> {
            ((DefaultTableModel) tableDescripcionPedidos.getModel()).addRow(new Object[]{
                detalles.getCodigo(),
                detalles.getProducto(),
                detalles.getCantidad()
            });
        });

    }

    /**
     * selecciona el pedido a entregar reconoce la celda que se ha modificado
     */
    public void cellListener() {
        Action action;
        action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                TableCellListener tcl = (TableCellListener) e.getSource();

                if (pedidoSelected) {
                    JOptionPane.showMessageDialog(null, "Solo se puede entregar un pedido a la vez", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {

                    if ((Boolean) tcl.getNewValue()) {
                        ///agregar pedido a la lista de recibir
                        System.out.println("Agregando pedido a lista de entrega");
                        System.out.println("Size"+ aEntregar.size());
                        if (aEntregar.size() != 0) {
                            JOptionPane.showMessageDialog(null, "Solo se puede entregar un pedido a la vez", "Advertencia", JOptionPane.WARNING_MESSAGE);
                            tablePedidosAEntregar.setValueAt(tcl.getOldValue(), tcl.getRow(), tcl.getColumn());
                        } else {
                            aEntregar.add(manager.getPedidoDAO().obtener((String) tablePedidosAEntregar.getValueAt(tcl.getRow(), 0)));
                        }
                    } else {

                        System.out.println("Se debe quitar el pedido de la lista de entrega");
                        if (aEntregar.contains(manager.getPedidoDAO().obtener((String) tablePedidosAEntregar.getValueAt(tcl.getRow(), 0)))) {

                            if (!aEntregar.remove(aEntregar.contains(manager.getPedidoDAO().obtener((String) tablePedidosAEntregar.getValueAt(tcl.getRow(), 0))))) {
                                //JOptionPane.showMessageDialog(null, "Error Al Remover Pedido", "Error", JOptionPane.ERROR_MESSAGE);
                               System.out.println("size "+ aEntregar.size());
                                aEntregar.clear();
                                System.out.println("size "+ aEntregar.size());
                            }
                        }

                    }
                }
            }
        };

        TableCellListener tcl = new TableCellListener(tablePedidosAEntregar, action);
        //
    }

    /**
     * llena la tabla Pedidos con la lista de tipo Pedidos
     *
     * @param pedidos List<Pedido>
     */
    public void fillTablePedidosAEntregar(List<Pedido> pedidos) {

        ((DefaultTableModel) tablePedidosAEntregar.getModel()).setRowCount(0);

        pedidos.forEach(pedido -> {
            ((DefaultTableModel) tablePedidosAEntregar.getModel()).addRow(new Object[]{
                pedido.getCodigo(),
                pedido.getAnticipo(),
                pedido.getSubtotal(),
                pedido.getFecha(),
                pedido.getCliente_nit(),
                pedido.isEntregado()
            });
        });
    }
    private boolean pedidoSelected;
    private List<Pedido> aEntregar;
    private Manager manager;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntEntrega;
    private javax.swing.JButton btnVerTodo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblAnticipo;
    private javax.swing.JLabel lblForTxtCredito;
    private javax.swing.JLabel lblForTxtEfectivo;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JDialog pagar;
    private javax.swing.JButton pagarPendiente;
    private javax.swing.JTable tableDescripcionPedidos;
    private javax.swing.JTable tablePedidosAEntregar;
    private javax.swing.JTextField txtCredito;
    private javax.swing.JTextField txtEfectivo;
    // End of variables declaration//GEN-END:variables
}
